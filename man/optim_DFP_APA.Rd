% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim_DFP_APA.R
\name{optim_DFP_APA}
\alias{optim_DFP_APA}
\title{optim_DFP_APA}
\usage{
optim_DFP_APA(starts, func, precBits = 64, maxSteps = 100,
  lineSearchMaxSteps = 500, keepValues = FALSE, VERBOSE = 0, ...)
}
\arguments{
\item{starts}{starting values for function parameters}

\item{func}{function to optimize, first argument is a vector containing the parameters to be optimized over. Must also take as argument precBits.}

\item{precBits}{precision bits for determining stopping condition (how close to zero is considered small enough for the gradient). Note that larger precBits may require much larger maxSteps and lineSearchMaxSteps.}

\item{maxSteps}{maximum number of iterations for the optimization algorithm}

\item{lineSearchMaxSteps}{maximum number of iterations for each line search (occurs for every iteration of the optimization algorithm).}

\item{keepValues}{if TRUE will return all visited values during the optimization, rather than only the final values.}

\item{VERBOSE}{integer number, if greater than 0 will provide some console output during the optimization process}

\item{...}{extra parameters passed on to func}
}
\description{
optim_DFP_APA arbitrary precision implementation of DFP (Davidon-Fletcher-Powel) quasi-newton optimization algorithm. The function func must take precBits as an arguement, to inform Rmpfr of the precision.
}
\examples{
# (1D example, compared against stats::optim)
optim_DFP_APA(15, func=function(x, precBits=64){(Rmpfr::mpfr(x,precBits)-10)^2}, maxSteps = 1000, precBits = 64)
optim(par = 15,     fn = function(x){(x-10)^2}, hessian = TRUE,   method="BFGS")

# (1D example, compared against stats::optim)
fun <- function(par, xdat, precBits=64) {
  l <- -1
  for(x in xdat) {
    l <- l * dpois_APA(x = x, lambda = par, precBits) 
  }
  return(l)
}

fun2 <- function(par, xdat) {
 -1*prod(dpois(x = xdat, lambda = par))
}

xdat <- c(8,11)#rpois(n = 2, lambda = 10)
starts <- 10

optim_DFP_APA(starts, fun, xdat=xdat, precBits=64)
optim(par = starts, fn = fun2, hessian = TRUE, method="BFGS", xdat=xdat)

# (2D example, compared against stats::optim)
fun2D <- function(par, xdat, ydat, precBits=64) {
  par <- exp(Rmpfr::mpfr(par, precBits))
  -1*(sum(log(dpois_APA(x = xdat, lambda = par[1], precBits)))+sum(log(dpois_APA(x = ydat, lambda = par[2], precBits))))
}
fun2D2 <- function(par, xdat, ydat) {
  par <- exp(par)
  -1*(sum(log(dpois(x = xdat, lambda = par[1])))+sum(log(dpois(x = ydat, lambda = par[2]))))
}
xdat2D <- c(1,2,3)
ydat2D <- c(5,8,9)
starts2D <- log(c(5,7))

trueValues <- c(log(mean(xdat2D)), log(mean(ydat2D)))
op1 <- optim_DFP_APA(starts2D, fun2D, xdat=xdat2D, ydat=ydat2D, precBits=64)
op2 <- optim(par = starts2D, fn = fun2D2, hessian = TRUE, method="BFGS", xdat=xdat2D, ydat=ydat2D)
}
